name: REUSABLE ACTION - Build and Deploy an WAVEMAKER application to AWS Elastic Beanstalk
# WAVEMAKER RELEASE NOTES https://docs.wavemaker.com/learn/wavemaker-release-notes/

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '18.16.1'  # Default Node.js version
      maven-version:
        required: false
        type: string
        default: '3.9.9'  # Default Maven Version
      java-version:
        required: false
        type: string
        default: '21'  # Default JAVA version for Build WM application refer to  release notes
      aws-region:
        required: false
        type: string
        default: 'eu-south-1'  # AWS Region
      environment-name:
        required: true
        type: string
      wm-app-name: # Wavemaker application version
        required: false
        type: string
        default: 'OneClickApp'  
      beanstalk-application-name: #AWS ElasticBeanstalk Application name
        required: false
        type: string
        default: 'OneClickApp'
      wm-profile:
        required: true
        type: string
        default: 'prod'
      aws-s3-bucket-name:
        required: true
        type: string
        default: ''
      aws-s3-bucket-region:
        required: true
        type: string
        default: 'eu-south-1'
    secrets:
       aws-access-key-id: # AWS AccessKey
        required: true      
       aws-secret-access-key: # AWS SecretKey
        required: true
      

jobs:
  build:
    name: Build and Deploy WM to AWS Elastic Beanstalk
    timeout-minutes: 20
    runs-on: ubuntu-latest

    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."    
      - run: echo "The repository name is $(basename $GITHUB_REPOSITORY)"
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      - name: Check out repository code
        uses: actions/checkout@v3

      - run: |
          echo "💡 The $REPO_NAME repository has been cloned to the runner."
          ls

      - name: Check if a wavemakeronline.com string exists in the wm-profile properties file
        id: check_string_in_properties
        run: |
          PROPERTIES_FILE="profiles/${{ inputs.wm-profile }}.properties"
          SEARCH_STRING="wavemakeronline.com"
          
          # Search for the string in the properties file
          if grep -q "$SEARCH_STRING" "$PROPERTIES_FILE"; then
            echo "✅ String '$SEARCH_STRING' NOT found in $PROPERTIES_FILE."
            echo "found=false" >> $GITHUB_ENV  # Store a failure flag            
          else           
            echo "❌ String '$SEARCH_STRING' found in $PROPERTIES_FILE."
            echo "found=true" >> $GITHUB_ENV  # Store a success flag for later use
            # Print the content of the file where the string was found, with the string highlighted
            echo "=== Contents of $FILE ==="
            grep --color=always "$SEARCH_STRING" "$FILE"  # Highlight the string in the file content
            echo "=========================="
            exit 1  # You can exit with status 1 to fail the job if the string is not found
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.14.0
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}
          java-distribution: 'corretto'

      - name: Enable Maven caching
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      - name: Check build environment versions (GIT, MAVEN, NPM, NODE, ANT)
        run: |
          git --version
          mvn -version
          npm --version
          node --version
         

      - name: Create the WAR after running the tests
        run: mvn clean install -P${{ inputs.wm-profile }} -X -e

      - name: wget a sample WAR file
        uses: wei/wget@v1
        with:
          args: -O ROOT.war https://tomcat.apache.org/tomcat-10.0-doc/appdev/sample/sample.war

      - name: Get the current time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 0
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      - name: Upload the WAR file to AWS
        env:
          TIME: "${{ steps.time.outputs.time }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"
        run: |        
          REPO_NAME=$(basename $GITHUB_REPOSITORY)
          cp /home/runner/work/$REPO_NAME/$REPO_NAME/target/${{ inputs.wm-app-name }}.war ${{ inputs.wm-app-name }}.war
          mkdir .ebextensions 
          cd .ebextensions
          ls
          cd ..
          zip ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip ROOT.war ${{ inputs.wm-app-name }}.war  
          unzip -l ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip
          aws s3 cp ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip s3://${{ inputs.aws-s3-bucket-name }}/ --region ${{ inputs.aws-s3-bucket-region }}
          aws elasticbeanstalk create-application-version --application-name ${{ inputs.beanstalk-application-name }} --version-label ${{ inputs.wm-app-name }}-$TIME --source-bundle S3Bucket="${{ inputs.aws-s3-bucket-name }}",S3Key="${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip" --no-auto-create-application --region ${{ inputs.aws-region }}
          aws elasticbeanstalk update-environment --environment-name ${{ inputs.environment-name }} --version-label ${{ inputs.wm-app-name }}-$TIME --region ${{ inputs.aws-region }}
