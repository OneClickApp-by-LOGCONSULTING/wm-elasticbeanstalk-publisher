name: REUSABLE ACTION - Build and Deploy an WAVEMAKER application to AWS Elastic Beanstalk
# WAVEMAKER RELEASE NOTES https://docs.wavemaker.com/learn/wavemaker-release-notes/

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '22.11.0'  # Default Node.js version
      npm-version:
        required: false
        type: string
        default: '10.9.0'
      maven-version:
        required: false
        type: string
        default: '3.9.9'  # Default Maven Version
      java-version:
        required: false
        type: string
        default: '21'  # Default JAVA version for Build WM application refer to release notes
      aws-region:
        required: false
        type: string
        default: 'eu-south-1'  # AWS Region
      environment-name:
        required: true
        type: string
      wm-app-name: # Wavemaker application name. This is the WM app name you can find in pom.xml file.
        required: false
        type: string
        default: 'OneClickApp'  
      force-lowercase-wm-app-name: # Force pipeline to change the WAR file name to deploy to lowercase letter only.
        required: false
        type: boolean
        default: false
      force-root-wm-app-name: # force Wavemaker application name as ROOT.war, it places Tomcat to have WM-APP in root context.
        required: false
        type: boolean
        default: false  
      beanstalk-application-name: #AWS ElasticBeanstalk Application name
        required: false
        type: string
        default: 'OneClickApp'
      wm-profile: #Wavemaker profile to use. Check the profiles folder with .properties files.
        required: true
        type: string
        default: 'prod'
      aws-s3-bucket-name: #AWS S3 bucket name where to store the WAR artifact file built by maven
        required: true
        type: string
        default: ''
      aws-s3-bucket-region: #
        required: true
        type: string
        default: 'eu-south-1'
      log-group-prefix:
         required: false
         type: string  
      root-war-url:
         required: false
         type: string  
         default: ''
    secrets:
       aws-access-key-id: # AWS AccessKey
        required: true      
       aws-secret-access-key: # AWS SecretKey
        required: true
        
jobs:
  build:
    name: Build and Deploy WM to AWS Elastic Beanstalk
    timeout-minutes: 20  # Timeout for the build job
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner provided by GitHub

    steps:
      # Output GitHub event info
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."    
      - run: echo "The repository name is $(basename $GITHUB_REPOSITORY)"
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}

      # Check out the repository code
      - name: Check out repository code
        uses: actions/checkout@v3

      # List the contents of the profiles directory
      - run: |
          REPO_NAME=${{ github.event.repository.name }}
          echo "💡 The $REPO_NAME repository has been cloned to the runner."          
          echo "========== Wavemaker App profiles properties files ========"
          cd profiles 
          ls
          echo "=========================================================="

      # Check if specific string exists in the wm-profile properties file
      - name: Check if a wavemakeronline.com string exists in the wm-profile properties file
        id: check_string_in_properties
        run: |
          echo "💡 Check the ${{ inputs.wm-profile }}.properties file in the properties folder. Looking for string 'wavemakeronline.com' because pipeline assumes to deploy in production."
          PROPERTIES_FILE="${{ inputs.wm-profile }}.properties"
          SEARCH_STRING="wavemakeronline.com"
          cd profiles
          # Check if the file exists
          if [ ! -f "$PROPERTIES_FILE" ]; then
            echo "❌ The properties file $PROPERTIES_FILE does not exist."
            exit 1
          fi        
          if grep -F -q -i "$SEARCH_STRING" "$PROPERTIES_FILE";
          then
            echo "❌ String '$SEARCH_STRING' is present in $PROPERTIES_FILE."               
            echo "=== Contents of $PROPERTIES_FILE ==="
            grep -F --color=always -i -n "$SEARCH_STRING" "$PROPERTIES_FILE"
            echo "=========================="
            exit 1
          else 
             echo "✅ String '$SEARCH_STRING' is NOT present in $PROPERTIES_FILE."     
          fi

      # Set up Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: ${{ inputs.node-version }}
      - name: Upgrade npm to ${{ inputs.npm-version }}
        run: npm install -g npm@${{ inputs.npm-version }}
      # Set up Maven
      - name: Setup Maven Action
        uses: s4u/setup-maven-action@v1.18.0
        with:
          java-version: ${{ inputs.java-version }}
          maven-version: ${{ inputs.maven-version }}
          java-distribution: 'corretto'

      # Enable Maven caching for dependency management
      - name: Enable Maven caching
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2

      # Check the versions of various tools (GIT, MAVEN, NPM, NODE, ANT)
      - name: Check build environment versions (GIT, MAVEN, NPM, NODE, ANT)
        run: |
          git --version
          mvn -version        
          echo "NPM version: $(npm --version)"
          echo "Node version: $(node --version)"
          echo "Ant version: $(ant -version)"

      # Build the WAR file after running the tests
      - name: Create the WAR after running the tests
        run: mvn clean install -P${{ inputs.wm-profile }} -X -e

      # Download a sample WAR file (for testing purposes)
      - name: wget a sample WAR file
        uses: wei/wget@v1
        with:
          args: -O ROOT.war ${{ inputs.root-war-url != '' && inputs.root-war-url || 'https://tomcat.apache.org/tomcat-10.0-doc/appdev/sample/sample.war' }}

      # Get current time for naming and versioning purposes
      - name: Get the current time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 0
          format: 'YYYY-MM-DD-HH-mm-ss'

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.aws-access-key-id }}
          aws-secret-access-key: ${{ secrets.aws-secret-access-key }}
          aws-region: ${{ inputs.aws-region }}

      # Set default for use-lowercase if the parameter is empty
      - name: Set default for use-lowercase if empty
        run: | 
          if [ -z "${{ inputs.force-lowercase-wm-app-name }}" ] || [[ "${{ inputs.force-lowercase-wm-app-name }}" =~ ^[fF](alse)?$ ]]; then
            echo "force-lowercase-wm-app-name is empty or false, defaulting to false."
            echo "USE_LOWERCASE=false" >> $GITHUB_ENV
          else
            echo "USE_LOWERCASE=true" >> $GITHUB_ENV
          fi

      # Fetch the log-streaming.config file from the GitHub repository
      - name: Fetch log-streaming.config. Check if EBT enviroment support Cloudwat log streaming.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if log-group-prefix is empty or not set
          if [ -z "${{ inputs.log-group-prefix }}" ]; then
            LOG_GROUP_PREFIX=${{ inputs.wm-app-name }}
            echo "log-group-prefix is empty. Using wm-app-name (${LOG_GROUP_PREFIX}) as the default value for log group."
          else
            LOG_GROUP_PREFIX=${{ inputs.log-group-prefix }}
            echo "log-group-prefix is set to: ${LOG_GROUP_PREFIX}"
          fi

          # Fetch the log-streaming.config file
          FILE_URL="https://api.github.com/repos/OneClickApp-by-LOGCONSULTING/wm-elasticbeanstalk-publisher/contents/log-streaming.config"
          curl -H "Authorization: token $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3.raw" -o log-streaming.config "$FILE_URL"
          echo "Fetched log-streaming.config file."

          # Replace placeholder in log-streaming.config
          sed -i "s/log_group_prefix/$LOG_GROUP_PREFIX/g" log-streaming.config
          echo "Updated log-streaming.config file with log-group-prefix: ${LOG_GROUP_PREFIX}"
          cat log-streaming.config

      # Upload the WAR file to AWS S3 and update Elastic Beanstalk environment
      - name: Upload the WAR file to AWS
        env:
          TIME: "${{ steps.time.outputs.time }}"
          GITHUB_REPOSITORY: "${{ github.repository }}"
        run: | 
          REPO_NAME=${{ github.event.repository.name }}
          WM_APP_NAME=${{ inputs.wm-app-name }}
          if [ "$USE_LOWERCASE" == "true" ]; then
            echo "Converting wm-app-name to lowercase"
            WM_APP_NAME=$(echo "${{ inputs.wm-app-name }}" | tr '[:upper:]' '[:lower:]')
            cp /home/runner/work/$REPO_NAME/$REPO_NAME/target/${{ inputs.wm-app-name }}.war $WM_APP_NAME.war
          else
            echo "Keeping original wm-app-name case"
            cp /home/runner/work/$REPO_NAME/$REPO_NAME/target/${{ inputs.wm-app-name }}.war $WM_APP_NAME.war
          fi
          mkdir .ebextensions 
          cp  log-streaming.config .ebextensions 
          cd .ebextensions
          ls
          cd ..     

          if [ -z "${{ inputs.force-root-wm-app-name }}" ] || [[ "${{ inputs.force-root-wm-app-name }}" =~ ^[fF](alse)?$ ]]; then
            echo "force-root-wm-app-name is empty or false, defaulting to false."
            zip ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip ROOT.war $WM_APP_NAME.war .ebextensions/log-streaming.config
          else
            echo "force-root-wm-app-name is true"
            rm ROOT.war
            cp $WM_APP_NAME.war ROOT.war
            zip ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip ROOT.war .ebextensions/log-streaming.config
          fi       
         
          unzip -l ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip
          aws s3 cp ${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip s3://${{ inputs.aws-s3-bucket-name }}/ --region ${{ inputs.aws-s3-bucket-region }}
          aws elasticbeanstalk create-application-version --application-name ${{ inputs.beanstalk-application-name }} --version-label ${{ inputs.wm-app-name }}-$TIME --source-bundle S3Bucket="${{ inputs.aws-s3-bucket-name }}",S3Key="${{ inputs.wm-app-name }}-ebt_deployer-$TIME.zip" --no-auto-create-application --region ${{ inputs.aws-region }}
          aws elasticbeanstalk update-environment --environment-name ${{ inputs.environment-name }} --version-label ${{ inputs.wm-app-name }}-$TIME --region ${{ inputs.aws-region }}
